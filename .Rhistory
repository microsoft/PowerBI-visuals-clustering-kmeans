set.seed(1234)
y=rnorm(100)
outlier(y)
library(outlier) # upload package
set.seed(1234);y=rnorm(100) # random data
outlier(y)
library(outlier)
library(outliers) # upload package
set.seed(1234);y=rnorm(100) # random data
outlier(y)
?outlier
set.seed(1234)
x = rnorm(10)
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq")  # chi-sq scores => (x - mean(x))^2/var(x)
scores(x, type="t")  # t scores
scores(x, type="chisq", prob=0.9)  # beyond 90th %ile based on chi-sq
scores(x, type="chisq", prob=0.95)  # beyond 95th %ile
scores(x, type="z", prob=0.95)  # beyond 95th %ile based on z-scores
set.seed(1234); x = rnorm(10) # random data
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq")  # chi-sq scores => (x - mean(x))^2/var(x)
#example
set.seed(1234); x = rnorm(10) # random data
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq")  # chi-sq scores => (x - mean(x))^2/var(x)
#> [1] 0.68458034 0.44007451 2.17210689 3.88421971 0.66539631  . . .
scores(x, type="t")  # t scores
scores(x, type="chisq", prob=0.9)  # beyond 90th %ile based on chi-sq
#> [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
scores(x, type="chisq", prob=0.95)  # beyond 95th %ile
scores(x, type="z", prob=0.95)  # beyond 95th %ile based on z-scores
scores(x, type="t", prob=0.95)  # beyond 95th %ile based on t-scores
x(5)
x[5]
#example
set.seed(1234); x = rnorm(10) # random data
x[5] = 10; #outlier
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq")  # chi-sq scores => (x - mean(x))^2/var(x)
#> [1] 0.68458034 0.44007451 2.17210689 3.88421971 0.66539631  . . .
scores(x, type="t")  # t scores
scores(x, type="chisq", prob=0.9)  # beyond 90th %ile based on chi-sq
#> [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
scores(x, type="chisq", prob=0.95)  # beyond 95th %ile
scores(x, type="z", prob=0.95)  # beyond 95th %ile based on z-scores
scores(x, type="t", prob=0.95)  # beyond 95th %ile based on t-scores
set.seed(1234); x = rnorm(10) # random data
x[5] = 10; #outlier
scores(x)  # z-scores => (x-mean)/sd
set.seed(1234); x = rnorm(10) # random data
x[5] = 42; #outlier
scores(x)  # z-scores => (x-mean)/sd
#example
set.seed(1234); x = rnorm(10) # random data
x[5] = 42; #outlier
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq", prob=0.999)  # beyond 95th %ile
scores(x, type="z", prob=0.999)  # beyond 95th %ile based on z-scores
scores(x, type="t", prob=0.999)  # beyond 95th %ile based on t-scores
#example
set.seed(1234); x = rnorm(10) # random data
x[5] = 42; #outlier
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq", prob=0.999)  # beyond 99.9th %ile
scores(x, type="z", prob=0.999)  # beyond 99.9th %ile based on z-scores
scores(x, type="t", prob=0.999)  # beyond 99.9th %ile based on t-scores
#example
set.seed(1234); x = rnorm(10) # random data
x[5] = 42; #outlier
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq", prob=0.99)  # beyond 99th %ile
scores(x, type="z", prob=0.99)  # beyond 99th %ile based on z-scores
scores(x, type="t", prob=0.99)  # beyond 99th %ile based on t-scores
debugSource('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
iconv('row', "latin1", "ASCII", sub="")
iconv('row aa dd', "latin1", "ASCII", sub="")
iconv('row aa dd 1', "latin1", "ASCII", sub="")
?iconv
dataset$Text1 <- sapply(dataset$Text,function(row) iconv(row, "latin1", "ASCII", sub=""))
View(dataset)
View(dataset)
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
View(dataset)
View(dataset)
(dataset$Text == dataset$Text1)
class(dataset$Text)
class(dataset$Text1)
?iconv
dataset$Text <- sapply(dataset$Text,function(row) iconv(row, "", "", sub=""))
corpus = Corpus(VectorSource(dataset))
cleanCorpus = clean_corpus(corpus)
blues <- brewer.pal(9, "Blues")
blues = blues [-(1:3)]
wordcloud(cleanCorpus, max.words = 50, colors = blues, scale=c(5,0.5), rot.per=0.35, use.r.layout=FALSE)
require("NLP")
require("tm")
require("RColorBrewer")
require("wordcloud")
library(NLP)
library(tm)
library(RColorBrewer)
library(wordcloud)
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeWords, c(stopwords("english"), "taco"))
return(corpus)
}
#dataset$Text1 <- sapply(dataset$Text,function(row) iconv(row, "latin1", "ASCII", sub=""))
dataset$Text <- sapply(dataset$Text,function(row) iconv(row, "", "", sub=""))
corpus = Corpus(VectorSource(dataset))
cleanCorpus = clean_corpus(corpus)
blues <- brewer.pal(9, "Blues")
blues = blues [-(1:3)]
wordcloud(cleanCorpus, max.words = 50, colors = blues, scale=c(5,0.5), rot.per=0.35, use.r.layout=FALSE)
install.packages("forecast")
install.packages("SparkR")
'c:\Program Files\spark-2.2.0-bin-hadoop2.7\'
Sys.setenv(SPARK_HOME = "c:/Program Files/spark-2.2.0-bin-hadoop2.7/")
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
2
sparkR.session()
rdf = data.frame(a =1, b = 10)
DF = createDataFrame(rdf)
0.25^3
0.25^4*30000
30000*0.25
30000*0.25^2
30000*0.25^3
30000*0.25^4
30000*0.25^5
install.packages("SnowballC")
iris
D = iris
View(D)
D = iris3
D = iris
dataset = data.frame(ID = c(1,2,3,4,5,6),X = c(1,1,1,3,3,3))
fit <- lm(X ~ ID, data = dataset)
fitted(fit)
fit
dataset$X1 = fitted(fit)
dataset
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit1.R')
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit1.R')
storage_account_name
storage_account_key
"DefaultEndpointsProtocol=https;AccountName=" + storage_account_name + ";AccountKey=" + storage_account_key
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit1.R')
connection_string
result
?azureGetBlob
??azureGetBlob
install.packages("AzureSMR")
library("AzureSMR")
A = read.csv(url("https://storageboefraty.blob.core.windows.net/mycontainerpublic/output1results.csv"))
View(A)
source('C:/Users/boefraty/projects/PBI/R/AML/tit1.R')
A = read.csv(url("https://storageboefraty.blob.core.windows.net/mycontainerpublic/output1results.csv"))
library("RODBC")
install.packages("RODBC")
source('C:/Users/boefraty/projects/PBI/R/AML/BatchRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
print(fromJSON(result))
A = fromJSON(result)
A$Results$output1
A$Results$output1$type
A$Results$output1$value
A$Results$output1$value[[1]]
A$Results$output1$value[[2]]
A$Results$output1$value[[3]]
A$Results$output1$value[[3]][[1]]
A$Results$output1$value[[3]][[2]]
A$Results$output1$value[[3]]
A$Results$output1$value[[2]]
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/BatchRequest.R')
View(OutputTitanic)
debugSource('C:/Users/boefraty/projects/PBI/R/AML/BatchRequest.R')
blobUrl
fc
ls
dir()
getwd()
libraryRequireInstall = function(packageName, ...)
{
if(!require(packageName, character.only = TRUE))
warning(paste("*** The package: '", packageName, "' was not installed ***",sep=""))
}
#Remark: most of the packages are required because of several automatic cluster number algorithms
libraryRequireInstall("nloptr")
libraryRequireInstall("seriation")
libraryRequireInstall("NbClust")
libraryRequireInstall("cluster")
libraryRequireInstall("car")
libraryRequireInstall("scales")
libraryRequireInstall("fpc")
libraryRequireInstall("mclust")
libraryRequireInstall("apcluster")
libraryRequireInstall("vegan")
libraryRequireInstall("Redmonder")
?kmeans
library(mclust)
install.packages("clust")
install.packages("mclust")
?Mclust
library(mclust)
?Mclust
?kmeans
install.packages("formattable")
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
install("d3heatmap")
install.packages("d3heatmap")
library(d3heatmap)
d3heatmap(mtcars, scale = "column", colors = "Spectral")
install.packages("dygraphs")
install.packages("highcharter")
install.packages("highcharter")
install.packages("highcharter")
install.packages("highcharter")
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
data(data_stock_3)
amStockMultiSet(data = data_stock_3)
install.packages("rAmCharts")
library(rAmCharts)
data(data_stock_3)
amStockMultiSet(data = data_stock_3)
set.seed(42)
?scale
install.packages("rattle")
library("rattle")
install.packages("RGtk2")
library("rattle")
library(RGtk2)
library(rattle)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
rattle
rattle()
128*3.5/12
install.packages("MnClust")
install.packages("NbClust")
install.packages("redmonder")
install.packages("Redmonder")
plot(42)
source('C:/Users/boefraty/projects/PBI/R/community/FrankThomson/fromMaster/scheduleViewRHTMLCV/script.r')
?Devices
Devices
dev.cur()
plot(42)
dev.cur()
library(datasets)
data
dataset
?datasets
data()
View(AirPassengers)
npk
View(npk)
plot(presidents)
plot(presidents)
plot(presidents)
View(presidents)
Summary(presidents)
str(presidents)
class(presidents)
data()
mtcars
View(mtcars)
.libPaths()
version
package_version()
package_version("corrplot")
packageDescription("corrplot")
2 +2
a = 2
a = 2
class(a)
as.character(a)
class(a)
a = as.character(a)
class(a)
?plot
plot(a)
plot(a,a)
randn(10)
nrand(10)
?nrand
?rand
?randn
?rnorm
rnorm (10)
plot(rnorm (10))
dev.cur()
plot(rnorm (10))
dev.cur()
ls
plot(cars)
plot(cars)
library(xkcd)
library(extrafont)
library(ggplot2)
#do you have xkcd fonts?
if( "xkcd" %in% fonts()) {
p <- ggplot() +
geom_point(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd")) }
else
{
warning("Not xkcd fonts installed!")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
getwd()
loadfonts()
"xkcd" %in% fonts()
loadfonts()
"xkcd" %in% fonts()
?loadfonts
.libPaths()
font.files()
require("ggplot2")
require("xkcd")
font.files()
font_install("xkcd")
font_install("xkcd.tff")
font.files()
library(xkcd)
library(extrafont)
library(ggplot2)
fonts()
names(pdfFonts())
names(pdfFonts())
install.packages("extrafont")
library(extrafont)
font_import()
y
install.packages("extrafont")
fonts()
a = 2
for i = 1:10 a = i
for i in 1:10 {a = i}
for (i in 1:10) {a = i}
a
install.packages("forecast")
source('C:/Users/boefraty/REditorWrapper_bfd259b6-f955-41aa-a6ea-0694ab1b98d9/REditorWrapper.R')
plot(dataset)
source('C:/Users/boefraty/REditorWrapper_bfd259b6-f955-41aa-a6ea-0694ab1b98d9/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_15e94b80-9cbf-49bf-b6b9-f54398ae5a86/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_15e94b80-9cbf-49bf-b6b9-f54398ae5a86/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_15e94b80-9cbf-49bf-b6b9-f54398ae5a86/REditorWrapper.R')
ff = 'c:/Users/boefraty/projects/VIBR/data/temp/AutoTaggedAudio/positive/outIvan.csv'
a = read.csv(file = ff)
View(a)
a = read.csv(file = ff)
View(a)
View(a)
2000/100
2000/100*4
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
debugSource('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
debugSource('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
debugSource('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
Q
debugSource('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
vecStr = c('a','a','b','c','f','d','d','a','b','g','f')
recodes = CreateRecode(vecStr, 3)
df = data.frame(numi =1:length(vecStr), chari = vecStr)
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
debugSource('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
paste(uvec[temp], sep ='', collapse = ',')
paste(uvec[temp], sep ="'", collapse = ',')
paste(uvec[temp], sep ="'", collapse = "','")
paste("'",uvec[temp], sep ="", collapse = "','")
paste(uvec[temp], sep ="", collapse = "','")
paste("'",paste(uvec[temp], sep ="", collapse = "','"),"'",sep ="")
debugSource('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
vecStrRecoded
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
View(mtcars)
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
data()
library(cars)
library(car)
?mtcars
View(mtcars)
View(iris3)
View(iris)
View(women)
View(state.abb)
View(state.area)
View(state.center)
View(state.x77)
View(States)
View(States)
View(States)
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
abbreviate(States1[,1],7)
States1$abr = abbreviate(States1[,1],7)
States1$abr = abbreviate(States1[,1],5)
States1$abr = paste(abbreviate(States1[,1],5),'..')
?abbreviate
States1$abr = paste(abbreviate(States1[,1],5,dot = TRUE))
States1$abr = paste(abbreviate(States1[,1],10,dot = TRUE))
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
source('C:/Users/boefraty/projects/PBI/R/community/LeelaRFacet/utilsBinning.R')
varPlane = "" #paste('<script> outDataStringPlane =`', outDataStringPlane, '`; </script>', sep ="")
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
setwd(source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/')
)
setwd'C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/')
setwd('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
settings_export_params_limitExportSize
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
p$x$layout$margin
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_37e56dc7-1283-4697-ac88-d06f950febe2/REditorWrapper.R')
listcolor
dataset
venndiagram <- venn.diagram(dataset, filename=NULL, na="remove")
venndiagram <- venn.diagram(dataset, filename=NULL)
venndiagram <- venn.diagram(t(dataset), filename=NULL)
